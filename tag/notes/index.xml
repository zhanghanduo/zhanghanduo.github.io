<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes | Zhang Handuo's Site</title><link>https://zhanghanduo.github.io/tag/notes/</link><atom:link href="https://zhanghanduo.github.io/tag/notes/index.xml" rel="self" type="application/rss+xml"/><description>Notes</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 01 Jun 2020 12:58:12 +0800</lastBuildDate><image><url>https://zhanghanduo.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url><title>Notes</title><link>https://zhanghanduo.github.io/tag/notes/</link></image><item><title>Seq2seq Model with Attention</title><link>https://zhanghanduo.github.io/post/attention/</link><pubDate>Mon, 01 Jun 2020 12:58:12 +0800</pubDate><guid>https://zhanghanduo.github.io/post/attention/</guid><description>&lt;blockquote>
&lt;p>Digested and reproduced from &lt;a href="https://jalammar.github.io/visualizing-neural-machine-translation-mechanics-of-seq2seq-models-with-attention/">Visualizing A Neural Machine Translation Model&lt;/a> by Jay Alammar.&lt;/p>
&lt;/blockquote>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Table of Contents&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#1-architecture-of-seq2seq">1. Architecture of Seq2seq&lt;/a>&lt;/li>
&lt;li>&lt;a href="#2-attention-mechanism">2. Attention Mechanism&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;p>Sequence-to-sequence models are deep learning models that have achieved a lot of success in tasks like machine translation, text summarization, and image captioning. &lt;a href="https://blog.google/products/translate/found-translation-more-accurate-fluent-sentences-google-translate/" target="_blank" rel="noopener">Google Translate&lt;/a> started using such a model in production in late 2016. These models are explained in the two pioneering papers (&lt;a href="https://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf" target="_blank" rel="noopener">Sutskever et al., 2014&lt;/a>, &lt;a href="http://emnlp2014.org/papers/pdf/EMNLP2014179.pdf" target="_blank" rel="noopener">Cho et al., 2014&lt;/a>).&lt;/p>
&lt;p>A sequence-to-sequence model is a model that takes a sequence of items (words, letters, features of an images&amp;hellip;etc) and outputs another sequence of items.&lt;/p>
&lt;p>In neural machine translation, a sequence is a series of words, processed one after another. The output is, likewise, a series of words:&lt;/p>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/seq2seq_2.mp4" type="video/mp4">
&lt;/video>
&lt;h2 id="1-architecture-of-seq2seq">1. Architecture of Seq2seq&lt;/h2>
&lt;p>The model is composed of an
&lt;mark>encoder&lt;/mark> and a
&lt;mark>decoder&lt;/mark>. The
&lt;mark>encoder&lt;/mark> processes each item in the input sequence and compiles the information into a vector (called the
&lt;mark>context&lt;/mark> ). After processing the input sequence, the
&lt;mark>encoder&lt;/mark> sends the
&lt;mark>context&lt;/mark> over to the
&lt;mark>decoder&lt;/mark> , which produces the output sequence item by item.&lt;/p>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/seq2seq_3.mp4" type="video/mp4">
&lt;/video>
&lt;p>The same applies in the case of machine translation.&lt;/p>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/seq2seq_4.mp4" type="video/mp4">
&lt;/video>
&lt;p>RNN (recurrent neural network) is shown as an illustration here to be the model of both
&lt;mark>encoder&lt;/mark> and
&lt;mark>decoder&lt;/mark> (Be sure to check out Luis Serrano&amp;rsquo;s &lt;a href="https://www.youtube.com/watch?v=UNmqTiOnRfg" target="_blank" rel="noopener">A friendly introduction to Recurrent Neural Networks&lt;/a> for an intro to RNNs).&lt;/p>
&lt;figure id="figure-the-context-is-a-vector-of-floats-later-in-this-post-we-will-visualize-vectors-in-color-by-assigning-brighter-colors-to-the-cells-with-higher-values">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="The **context** is a vector of floats. Later in this post we will visualize vectors in color by assigning brighter colors to the cells with higher values." srcset="
/post/attention/context_hu7a6233c42fac561492b0af65e3f78395_20402_85ccdd37ca6d815d76d50e0b8096cd4f.webp 400w,
/post/attention/context_hu7a6233c42fac561492b0af65e3f78395_20402_7f20bef431fa1ca8c6bf6e5882d78875.webp 760w,
/post/attention/context_hu7a6233c42fac561492b0af65e3f78395_20402_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://zhanghanduo.github.io/post/attention/context_hu7a6233c42fac561492b0af65e3f78395_20402_85ccdd37ca6d815d76d50e0b8096cd4f.webp"
width="716"
height="252"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
The &lt;strong>context&lt;/strong> is a vector of floats. Later in this post we will visualize vectors in color by assigning brighter colors to the cells with higher values.
&lt;/figcaption>&lt;/figure>
&lt;p>You can set the size of the
&lt;mark>context&lt;/mark> vector when you set up your model. It is basically the number of hidden units in the
&lt;mark>encoder&lt;/mark> RNN. These visualizations show a vector of size 4, but in real world applications the
&lt;mark>context&lt;/mark> vector would be of a size like 256, 512, or 1024.&lt;/p>
&lt;p>By design, a RNN takes two inputs at each time step: an input (in the case of the encoder, one word from the input sentence), and a hidden state. The word, however, needs to be represented by a vector. To transform a word into a vector, we turn to the class of methods called &amp;ldquo;&lt;a href="https://machinelearningmastery.com/what-are-word-embeddings/" target="_blank" rel="noopener">word embedding&lt;/a>&amp;rdquo; algorithms. These turn words into vector spaces that capture a lot of the meaning/semantic information of the words (e.g. &lt;a href="http://p.migdal.pl/2017/01/06/king-man-woman-queen-why.html" target="_blank" rel="noopener">king - man + woman = queen&lt;/a>).&lt;/p>
&lt;figure id="figure-we-need-to-turn-the-input-words-into-vectors-before-processing-them-that-transformation-is-done-using-a-word-embedding-algorithm-we-can-use-pre-trained-embeddingshttpahogrammercom20170120the-list-of-pretrained-word-embeddings-or-train-our-own-embedding-on-our-dataset-embedding-vectors-of-size-200-or-300-are-typical-were-showing-a-vector-of-size-four-for-simplicity">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="We need to turn the input words into vectors before processing them. That transformation is done using a **word embedding** algorithm. We can use [pre-trained embeddings](http://ahogrammer.com/2017/01/20/the-list-of-pretrained-word-embeddings/) or train our own embedding on our dataset. Embedding vectors of size 200 or 300 are typical, we&amp;#39;re showing a vector of size four for simplicity." srcset="
/post/attention/embedding_hue52ea6887e4ffd78961218df5eff4111_41024_4caff9934379c54892ef9e2a484b83fd.webp 400w,
/post/attention/embedding_hue52ea6887e4ffd78961218df5eff4111_41024_80b70f6d1ed50e6368f83f94c6f9100d.webp 760w,
/post/attention/embedding_hue52ea6887e4ffd78961218df5eff4111_41024_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://zhanghanduo.github.io/post/attention/embedding_hue52ea6887e4ffd78961218df5eff4111_41024_4caff9934379c54892ef9e2a484b83fd.webp"
width="760"
height="248"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
We need to turn the input words into vectors before processing them. That transformation is done using a &lt;strong>word embedding&lt;/strong> algorithm. We can use &lt;a href="http://ahogrammer.com/2017/01/20/the-list-of-pretrained-word-embeddings/" target="_blank" rel="noopener">pre-trained embeddings&lt;/a> or train our own embedding on our dataset. Embedding vectors of size 200 or 300 are typical, we&amp;rsquo;re showing a vector of size four for simplicity.
&lt;/figcaption>&lt;/figure>
&lt;p>Now that we&amp;rsquo;ve introduced our main vectors/tensors, let&amp;rsquo;s recap the mechanics of an RNN and establish a visual language to describe these models:&lt;/p>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/RNN_1.mp4" type="video/mp4">
&lt;/video>
&lt;p>The next RNN step takes the second input vector and hidden state #1 to create the output of that time step. Later in the post, we&amp;rsquo;ll use an animation like this to describe the vectors inside a neural machine translation model.&lt;/p>
&lt;p>In the following visualization, each pulse for the
&lt;mark>encoder&lt;/mark> or
&lt;mark>decoder&lt;/mark> is that RNN processing its inputs and generating an output for that time step. Since the
&lt;mark>encoder&lt;/mark> and
&lt;mark>decoder&lt;/mark> are both RNNs, each time step one of the RNNs does some processing, it updates its
&lt;mark>hidden state&lt;/mark> based on its inputs and previous inputs it has seen.&lt;/p>
&lt;p>Let&amp;rsquo;s look at the
&lt;mark>hidden states&lt;/mark> for the
&lt;mark>encoder&lt;/mark>. Notice how the last
&lt;mark>hidden state&lt;/mark> is actually the
&lt;mark>context&lt;/mark> we pass along to the
&lt;mark>decoder&lt;/mark>.&lt;/p>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/seq2seq_5.mp4" type="video/mp4">
&lt;/video>
&lt;p>The
&lt;mark>decoder&lt;/mark> also maintains a
&lt;mark>hidden states&lt;/mark> that it passes from one time step to the next. We just didn&amp;rsquo;t visualize it in this graphic because we&amp;rsquo;re concerned with the major parts of the model for now.&lt;/p>
&lt;p>Let&amp;rsquo;s now look at another way to visualize a sequence-to-sequence model. This animation will make it easier to understand the static graphics that describe these models. This is called an &amp;ldquo;unrolled&amp;rdquo; view where instead of showing the one
&lt;mark>decoder&lt;/mark>, we show a copy of it for each time step. This way we can look at the inputs and outputs of each time step.&lt;/p>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/seq2seq_6.mp4" type="video/mp4">
&lt;/video>
&lt;h2 id="2-attention-mechanism">2. Attention Mechanism&lt;/h2>
&lt;p>Attention is a generalized pooling method with. The core component in the attention mechanism is the attention layer, or called attention for simplicity. An input of the attention layer is called a query. For a query, attention returns an o bias alignment over inputsutput based on the memory — a set of key-value pairs encoded in the attention layer. To be more specific, assume that the memory contains $n$ key-value pairs, $(k_1, v_1), \cdots, (k_n, v_n)$ with $\mathbf{k}\in{ \mathbb{R}^{d_k}}, \mathbf{v}\in{ \mathbb{R}^{d_v}}$. Given a query $\mathbf{q}\in \mathbb{R}^{d_q}$, the attention layer returns an output $\mathbf{o}\in{ \mathbb{R}^{d_v}} $ with the same shape as the value.&lt;/p>
&lt;p>Pros of using attention:&lt;/p>
&lt;ol>
&lt;li>With attention, Seq2seq does not forget the source input.&lt;/li>
&lt;li>With attention, the decoder knows where to focus.&lt;/li>
&lt;/ol>
&lt;p>The
&lt;mark>context&lt;/mark> vector turned out to be a bottleneck for these types of models. It made it challenging for the models to deal with long sentences. A solution was proposed in &lt;a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">Bahdanau et al., 2014&lt;/a> and &lt;a href="https://arxiv.org/abs/1508.04025" target="_blank" rel="noopener">Luong et al., 2015&lt;/a>. These papers introduced and refined a technique called &amp;ldquo;Attention&amp;rdquo;, which highly improved the quality of machine translation systems. Attention allows the model to focus on the relevant parts of the input sequence as needed.&lt;/p>
&lt;figure id="figure-at-time-step-7-the-attention-mechanism-enables-the-decoder-to-focus-on-the-word-étudiant-student-in-french-before-it-generates-the-english-translation-this-ability-to-amplify-the-signal-from-the-relevant-part-of-the-input-sequence-makes-attention-models-produce-better-results-than-models-without-attention">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="At time step 7, the attention mechanism enables the **decoder** to focus on the word **étudiant** (*student* in french) before it generates the English translation. This ability to amplify the signal from the relevant part of the input sequence makes attention models produce better results than models without attention." srcset="
/post/attention/attention_hu3a304cc6d98049bbd17d98bab91c60b0_73300_e78158aec6a1e57573114c9c6faf85a1.webp 400w,
/post/attention/attention_hu3a304cc6d98049bbd17d98bab91c60b0_73300_3aad1825d2b3ab1c14408a73d81a281c.webp 760w,
/post/attention/attention_hu3a304cc6d98049bbd17d98bab91c60b0_73300_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://zhanghanduo.github.io/post/attention/attention_hu3a304cc6d98049bbd17d98bab91c60b0_73300_e78158aec6a1e57573114c9c6faf85a1.webp"
width="760"
height="209"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
At time step 7, the attention mechanism enables the &lt;strong>decoder&lt;/strong> to focus on the word &lt;strong>étudiant&lt;/strong> (&lt;em>student&lt;/em> in french) before it generates the English translation. This ability to amplify the signal from the relevant part of the input sequence makes attention models produce better results than models without attention.
&lt;/figcaption>&lt;/figure>
&lt;p>Let&amp;rsquo;s continue looking at attention models at this high level of abstraction. An attention model differs from a classic sequence-to-sequence model in two main ways:&lt;/p>
&lt;p>First, the encoder passes a lot more data to the decoder. Instead of passing the last hidden state of the encoding stage, the encoder passes &lt;em>all&lt;/em> the hidden states to the decoder:&lt;/p>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/seq2seq_7.mp4" type="video/mp4">
&lt;/video>
&lt;p>Second, an attention decoder does an extra step before producing its output. In order to focus on the parts of the input that are relevant to this decoding time step, the decoder does the following:&lt;/p>
&lt;ol>
&lt;li>Look at the set of encoder
&lt;mark>hidden states&lt;/mark> it received &amp;ndash; each encoder hidden states is most associated with a certain word in the input sentence&lt;/li>
&lt;li>Give each
&lt;mark>hidden states&lt;/mark> a score (let&amp;rsquo;s ignore how the scoring is done for now)&lt;/li>
&lt;li>Multiply each
&lt;mark>hidden states&lt;/mark> by its softmaxed score, thus amplifying
&lt;mark>hidden states&lt;/mark> with high scores, and drowning out
&lt;mark>hidden states&lt;/mark> with low scores&lt;/li>
&lt;/ol>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/attention_process.mp4" type="video/mp4">
&lt;/video>
&lt;p>This scoring exercise is done at each time step on the
&lt;mark>decoder&lt;/mark> side.&lt;/p>
&lt;p>Let us now bring the whole thing together in the following visualization and look at how the attention process works:&lt;/p>
&lt;ol>
&lt;li>The attention decoder RNN takes in the embedding of the &amp;lt;END&amp;gt; token, and an initial decoder hidden state.&lt;/li>
&lt;li>The RNN processes its inputs, producing an output and a new hidden state vector (h4). The output is discarded.&lt;/li>
&lt;li>Attention Step: We use the encoder hidden states and the h4 vector to calculate a context vector (C4) for this time step.&lt;/li>
&lt;li>We concatenate h4 and C4 into one vector.&lt;/li>
&lt;li>We pass this vector through a
&lt;mark>feedforward neural network&lt;/mark> (one trained jointly with the model).&lt;/li>
&lt;li>The output of the feedforward neural networks indicates the output word of this time step.&lt;/li>
&lt;li>Repeat for the next time steps&lt;/li>
&lt;/ol>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/attention_tensor_dance.mp4" type="video/mp4">
&lt;/video>
&lt;p>This is another way to look at which part of the input sentence we&amp;rsquo;re paying attention to at each decoding step:&lt;/p>
&lt;video controls >
&lt;source src="https://zhanghanduo.github.io/post/attention/seq2seq_9.mp4" type="video/mp4">
&lt;/video>
&lt;p>Note that the model isn&amp;rsquo;t just mindless aligning the first word at the output with the first word from the input. It actually learned from the training phase how to align words in that language pair (French and English in our example). An example for how precise this mechanism can be comes from the attention papers listed above:&lt;/p>
&lt;figure id="figure-you-can-see-how-the-model-paid-attention-correctly-when-outputing-european-economic-area-in-french-the-order-of-these-words-is-reversed-européenne-économique-zone-as-compared-to-english-every-other-word-in-the-sentence-is-in-similar-order">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="You can see how the model paid attention correctly when outputing **European Economic Area**. In French, the order of these words is reversed (*européenne économique zone*) as compared to English. Every other word in the sentence is in similar order." srcset="
/post/attention/attention_sentence_hu9a38ed3c48ed5954b46a7f19ef9a39e3_54758_10bfeee107fcc0b7e4143cc0ba0d88a2.webp 400w,
/post/attention/attention_sentence_hu9a38ed3c48ed5954b46a7f19ef9a39e3_54758_5650b663e87811862988e2ac79414855.webp 760w,
/post/attention/attention_sentence_hu9a38ed3c48ed5954b46a7f19ef9a39e3_54758_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://zhanghanduo.github.io/post/attention/attention_sentence_hu9a38ed3c48ed5954b46a7f19ef9a39e3_54758_10bfeee107fcc0b7e4143cc0ba0d88a2.webp"
width="634"
height="647"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
You can see how the model paid attention correctly when outputing &lt;strong>European Economic Area&lt;/strong>. In French, the order of these words is reversed (&lt;em>européenne économique zone&lt;/em>) as compared to English. Every other word in the sentence is in similar order.
&lt;/figcaption>&lt;/figure>
&lt;p>You can check TensorFlow&amp;rsquo;s &lt;a href="https://github.com/tensorflow/nmt" target="_blank" rel="noopener">Neural Machine Translation (seq2seq) Tutorial&lt;/a>.&lt;/p></description></item><item><title>You only look once (YOLO) -- (2)</title><link>https://zhanghanduo.github.io/post/yolov2/</link><pubDate>Mon, 20 Aug 2018 12:58:12 +0800</pubDate><guid>https://zhanghanduo.github.io/post/yolov2/</guid><description>&lt;p>YOLO has higher localization errors and the recall (measure how good to locate all objects) is lower, compared to SSD. YOLOv2 is the second version of the YOLO with the objective of improving the accuracy significantly while making it faster.&lt;/p>
&lt;p>The backbone network architecture of YOLO v2 is as follows:
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://zhanghanduo.github.io/img/yolo/yolo2_net.jpg" alt="Yolo2 Backbone" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="1-accuracy-improvements">1. Accuracy Improvements&lt;/h2>
&lt;h3 id="batch-normalization">Batch Normalization&lt;/h3>
&lt;p>Also removes the need of dropouts. mAP increases by 2%.&lt;/p>
&lt;h3 id="high-resolution-classifier">High-resolution Classifier&lt;/h3>
&lt;p>To generate predictions with shape of $7\times 7 \times 125$, we replace the final fully connected layers with a $3\times 3$ &lt;code>convolution layer&lt;/code> each outputting 1024 output channels. Then we apply a final $1\times 1$ convolutional layer to convert the $7\times 7 \times 1024$ output into $7\times 7 \times 125$ and retrain it end-to-end. This makes training easier and moves mAP up by 4%.&lt;/p>
&lt;h3 id="convolution-with-anchor-boxes">Convolution with Anchor Boxes&lt;/h3>
&lt;p>Early training is susceptible to unstable gradients. Arbitrary guesses on the boundary boxes may result in steep gradient changes.&lt;/p>
&lt;p>In real life, boudnary boxes are not arbitrary. So the author create 5 &lt;strong>anchor&lt;/strong> boxes with the following shapes.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://zhanghanduo.github.io/img/yolo/anchor_box.jpeg" alt="5 anchor boxes" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Instead of directly predicting 5 arbitrary boundary boxes, we predict offsdets to each of the anchor boxes. If we &lt;strong>constrain&lt;/strong> the offset values, we can maintain the diversity of the predictions and have each prediction focusing on specific shape. So the initial training will be more stable.&lt;/p>
&lt;h3 id="dimension-clusters">Dimension Clusters&lt;/h3>
&lt;p>In many problem domains, the boundary boxes have strong patterns. For example, in the autonomous driving, the 2 most common boundary boxes will be cars and pedestrians at different distances. To identify the top-K boundary boxes that have the best coverage for the training data, we run K-means clustering on the training data to locate the centroids of the top-K clusters.&lt;/p>
&lt;p>Since we are dealing with boundary boxes rather than points, we cannot use the regular spatial distance to measure datapoint distances. No surprise, we use IoU.&lt;/p>
&lt;h3 id="direct-location-prediction">Direct location prediction&lt;/h3>
&lt;p>We make predictions on the offsets to the anchors. Nevertheless, if it is unconstrained, our guesses will be randomized again. YOLO predicts 5 parameters (tx, ty, tw, th, and to) and applies the sigma function to constraint its possible offset range.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://zhanghanduo.github.io/img/yolo/yolo2_location_predict.jpeg" alt="Location prediction on anchors" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>With the use of k-means clustering (dimension clusters) and the improvement mentioned in this section, mAP increases 5%.&lt;/p></description></item><item><title>You only look once (YOLO) -- (1)</title><link>https://zhanghanduo.github.io/post/yolo1/</link><pubDate>Mon, 20 Aug 2018 11:39:58 +0800</pubDate><guid>https://zhanghanduo.github.io/post/yolo1/</guid><description>&lt;p>&lt;strong>You Only Look Once (YOLO)&lt;/strong> is an object detection system targeted for real-time processing. There are three versions of YOLO: YOLO, YOLOv2 (and YOLO9000) and YOLOv3. For this article, we mainly focus on YOLO first stage.&lt;/p>
&lt;h2 id="1-introduction">1. Introduction&lt;/h2>
&lt;p>The target is to find out the bounding box (rectangular boundary frame) of all the objects in the picture and meanwhile judge the categories of them, where left top coordinate denoted by $(x,y)$, as well as the width and height of the rectangle bounding box by $(w,h)$.
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://zhanghanduo.github.io/img/yolo/intro_yolo_cat.png" alt="Bounding box of a detected cat" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>The challenge here is that we have unknown number of objects, so the output dimension is not fixed.&lt;/p>
&lt;h2 id="2-grid-cell">2. Grid Cell&lt;/h2>
&lt;p>The idea of YOLO is to output a fixed number of dimension which is big enough to contain all the objects. We crop the original picture and divide it into an $S\times S$ grid. Each grid cell predicts only &lt;strong>one&lt;/strong> object. For example, the red grid cell tries to predict the &amp;ldquo;dog&amp;rdquo; object whose center falls inside that grid cell.
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://zhanghanduo.github.io/img/yolo/yolo_dog_grid.jpg" alt="Each grid cell only detects one object" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Each grid cell predicts a fixed number of boundary boxes. In the next example, the yellow grid cell makes two boundary box predictions (blue boxes) to locate where the person is.
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://zhanghanduo.github.io/img/yolo/yolo_rider_demo.jpeg" alt="Each grid cell make a fixed number of boundary box guesses for the object." loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>For each grid cell,&lt;/p>
&lt;ul>
&lt;li>it predicts &lt;strong>B&lt;/strong> boundary boxes and each box has a &lt;strong>box confidence score&lt;/strong>,&lt;/li>
&lt;li>it detects &lt;strong>one&lt;/strong> object only regardless of the number of boxes B,&lt;/li>
&lt;li>it predicts &lt;strong>C conditional class probabilities&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>For example we can use $7\times 7$ grids ($S\times S$), 2 boundary boxes (&lt;strong>B&lt;/strong>) with 1 corresponding confidence score and 4 coordinates ($w,h,x,y$), as well as 4 classes (&lt;strong>C&lt;/strong>), which makes up for $1\times 14$ tensor.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://zhanghanduo.github.io/img/yolo/yolo_grid2.png" alt="tensor dimemsion for 1 gird cell" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="3-network-design">3. Network Design&lt;/h2>
&lt;p>YOLO has 24 convolutional layers followed by 2 fully connected layers (FC). Some convolution layers use $1\times 1$ reduction layers to reduce the depth of feature maps. For the last convolution layer, the output is a tensor with shape $(7,7,1024). Then tensor is flattened, and finally output $7\times 7 \times 30$ parameters (if 20 classes and 2 bboxes predictions per grid cell) through linear regression.
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://zhanghanduo.github.io/img/yolo/yolo1_net.png" alt="YOLO network architecture" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="4-loss-fuction">4. Loss Fuction&lt;/h2>
&lt;p>YOLO uses sum-squared error between predictions (the one with highest IoU) and ground truth to calculate loss. The loss function composes of:&lt;/p>
&lt;ul>
&lt;li>the &lt;strong>classification loss&lt;/strong>.&lt;/li>
&lt;li>the &lt;strong>localization loss&lt;/strong>.&lt;/li>
&lt;li>the &lt;strong>confidence loss&lt;/strong> (the objectness of the box).&lt;/li>
&lt;/ul>
&lt;h3 id="classification-loss">Classification loss&lt;/h3>
&lt;p>$$
\sum_{i=0}^{S^2} \mathbf{1}_i^{obj} \cdot{ \sum _{cc\in{classes}} \left( p _{i}(cc) - \hat{p} _i(cc) \right)^2}
$$
where $\mathbf{1}_i^{obj} = 1$ if an object appears in cell $i$, otherwise 0;&lt;/p>
&lt;p>$\hat{p} _i(cc)$ denotes the conditional class probability for class $cc$ in cell $i$.&lt;/p>
&lt;h3 id="localization-loss">Localization loss&lt;/h3>
&lt;p>\begin{aligned}
\lambda _{coord} \sum _{i=0}^{S^2} \sum _{j=0}^{B} \mathbf{1} _{ij}^{obj} \left[ (x _i - \hat{x _i})^2 + (y _i - \hat{y} _i)^2 \right] \
+ \lambda _{coord} \sum _{i=0}^{S^2} \sum _{j=0}^{B} \mathbf{1} _{ij}^{obj} \left[ (\sqrt{w _i} - \sqrt{\hat{w} _i} )^2 + (\sqrt{h _i} - \sqrt{\hat{h} _i} )^2 \right]
\end{aligned}&lt;/p>
&lt;p>where $\mathbf{1}_{ij}^{obj} = 1$ if the $j$th boundary box in cell $i$ is responsible for detecting object, otherwise 0;&lt;/p>
&lt;p>$\lambda_{coord}$ increases the weight for the loss in the boundary box coordinates.&lt;/p>
&lt;p>YOLO predicts the square root of bounding box width and height in order to differentiate large and small boxes. By setting $\lambda_{coord}$ (default: 5), we put more emphasis on the boundary box accuracy.&lt;/p>
&lt;h3 id="confidence-loss">Confidence loss&lt;/h3>
&lt;p>If an object is detected in the box, the confidence loss is:&lt;/p>
&lt;p>$$
\sum _{i=0}^{S^2} \sum _{j=0}^{B} \mathbf{1} _{ij}^{obj} \left( C _i - \hat{C} _i \right)^2
$$&lt;/p>
&lt;p>where $\mathbf{1}_{ij}^{obj} = 1$ if the $j$th boundary box in cell $i$ is responsible for detecting the object, otherwise 0;&lt;/p>
&lt;p>$\hat{C} _i$ is the box confidence score of the box $j$ in cell $i$.&lt;/p>
&lt;p>However, if an object is not detected:&lt;/p>
&lt;p>$$
\lambda _{backg} \sum _{i=0}^{S^2} \sum _{j=0}^{B} \mathbf{1} _{ij}^{backg} \left( C _i - \hat{C} _i \right)^2
$$&lt;/p>
&lt;p>where $\mathbf{1} _{ij}^{backg} $ is the complement of $ \mathbf{1} _{ij}^{obj}$.&lt;/p>
&lt;p>$\hat{C} _i$ is the box confidence score of the box $j$ in cell $i$.&lt;/p>
&lt;p>$\lambda _{backg}$ weights down the loss when detecting background.&lt;/p>
&lt;p>As most boxes do not contain any objects, we weight the loss down by a factor $\lambda _{backg}$ (default: 0.5) to balance the weight.&lt;/p>
&lt;h2 id="5-inference-non-maximal-suppression">5. Inference: Non-maximal Suppression&lt;/h2>
&lt;p>Next, we multiply all these class scores with bounding box confidence and get class scores for different boudning boxes. So output is $7\times 7\times 2 = 98$.
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://zhanghanduo.github.io/img/yolo/yolo_grid3.png" alt="class scores for each bounding box" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Then we set a threshold value of scores and sort them descendingly. Non-max supressing alogrithm is used to set score to zero for redundant boxes.&lt;/p>
&lt;p>For example, dog score for bbox1 as 0.5 and bbox 2 as 0.3. We take an Intersection over Union (IOU) of these values and if the value is greater than 0.5, we will set the value for box2 as zero, otherwise continue to the next box.&lt;/p></description></item><item><title>Pooling Layer in CNN (1)</title><link>https://zhanghanduo.github.io/post/pooling/</link><pubDate>Wed, 02 May 2018 10:16:18 +0800</pubDate><guid>https://zhanghanduo.github.io/post/pooling/</guid><description>&lt;p>Today I didn&amp;rsquo;t have the mood to continue my work on map merging of different cameras. So I read the paper from DeepMind of &lt;code>Learned Deformation Stability in Convolutional Neural Networks&lt;/code> recommended by &lt;a href="https://wangchen.online/" target="_blank" rel="noopener">Wang Chen&lt;/a>.&lt;/p>
&lt;h2 id="1-convolution-operation">1. Convolution Operation&lt;/h2>
&lt;p>Convolution operation is typically denoted with an asterisk&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:
$$
s(t)=(x*w)(t)
$$
In Convolutional network terminology, the &lt;em>x&lt;/em> is referred to as the &lt;strong>input&lt;/strong>, and the &lt;em>w&lt;/em> as the &lt;strong>kernel&lt;/strong>. The output is sometimes referred to as the &lt;strong>feature map&lt;/strong>.&lt;/p>
&lt;hr>
&lt;p>Convolution leverages three ideas that help improve the ML system: &lt;strong>sparse interactions&lt;/strong>, &lt;strong>parameter sharing&lt;/strong> and &lt;strong>equivariant representations&lt;/strong>. Moreover, convolution provides a means for working with inputs of variable size.&lt;/p>
&lt;h4 id="--sparse-interactions">- Sparse interactions&lt;/h4>
&lt;p>Also called sparse connectivity or sparse weights, makes the kernel smaller than the input. By detecting small, meaningful features such as edges with kernels (tens or hundreds of pixels), we don&amp;rsquo;t need to process all the input pixels(millions), which means much fewer parameters.&lt;/p>
&lt;table>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;img src="https://gitlab.com/handuo/msc_storage/uploads/4c0bd1f6e4a69d35c8390362fbbca78a/sparse_connectivity.png" alt="Sparse connectivity" width="80%">
&lt;/td>
&lt;td>
&lt;img src="https://gitlab.com/handuo/msc_storage/uploads/bf6611fd0b7646dcc68358a173be3388/param_sharing.png" alt="Parameter sharing" width="100%">
&lt;/td>
&lt;/tr>
&lt;tr align="center">
&lt;td>Sparse connectivity&lt;/td>
&lt;td>Parameter sharing&lt;/td>
&lt;/td>
&lt;/tbody>
&lt;/table>
&lt;h4 id="--parameter-sharing">- Parameter sharing&lt;/h4>
&lt;p>Refers to using the same parameter for more than one function in a model, so a network has &lt;strong>tied weights&lt;/strong>. This reduces the storage requirements of the model to &lt;em>k&lt;/em> parameters.&lt;/p>
&lt;h4 id="--equivariance-to-translation">- Equivariance to translation&lt;/h4>
&lt;p>But not to other transformations like scale or rotation change.&lt;/p>
&lt;hr>
&lt;h2 id="2-pooling">2. Pooling&lt;/h2>
&lt;p>In all cases, pooling helps to make the representation become approximately invariant to small translations of the input. Pooling over spatial regions produces invariance to translation, but if we pool over the outputs of separately parametrized convolutions, the features can learn which transformations to become invariant to.&lt;/p>
&lt;p>Because pooling summarizes the responses over a whole neighborhood, it is
possible to use fewer pooling units than detector units, by reporting summary
statistics for pooling regions spaced k pixels apart rather than 1 pixel apart.&lt;/p>
&lt;p>This article tries to analyze the relationship between the pooling layers and deformation stability in CNN based on the paper &lt;code>Learned Deformation Stability in Convolutional Neural Networks&lt;/code>.&lt;/p>
&lt;p>The paper tries to address the following questions:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Does pooling have an effect on the learned deformation stability?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Is deformation stability achieved in the absence of pooling?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How can deformation stability be achieved in the absence of pooling?&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Traditional way of thinking &lt;code>pooling&lt;/code> layer is that it is useful in two reasons:&lt;/p>
&lt;ol>
&lt;li>By eliminating non-maximal (for &lt;em>max-pooling&lt;/em>), it reduces computation for upper layers.&lt;/li>
&lt;li>It porvides a form of translation invariance. Imagine cascading a max-pooling layer with a convolutional layer. There are 8 directions in which one can translate the input image by a single pixel. If max-pooling is done over a $2\times2$ region, 3 out of these 8 possible configurations will produce exactly the same output at the conv layer. For $3\times3$ windows, this jumps to $\frac{5}{8}$.&lt;/li>
&lt;/ol>
&lt;p>Then the author first defines the invariance to transformations of an input &lt;em>X&lt;/em> that do not affect the output &lt;em>Y&lt;/em>:&lt;/p>
&lt;p>$$
P(Y|\tau(X))=P(Y|X) \forall \tau \in T
$$&lt;/p>
&lt;p>Then he defines the measurement of &lt;strong>sensitivity to deformation&lt;/strong> to evaluate this invariance.&lt;/p>
&lt;p>For a representation &lt;em>r&lt;/em> mapping from input image to some layer of a CNN, the measurement is:&lt;/p>
&lt;p>$$
\frac{dcos(r(x), r(\tau(x))}{median(dcos(r(x), r(y)))}
$$
where &lt;em>dcos&lt;/em> is the cosine distance. That is we normalize distances by the median distance between randomly selected images from the original dataset.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Ian Goodfellow, Yoshua Bengio, and Aaron Courville, &lt;strong>Deep Learning&lt;/strong>, 2016.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>